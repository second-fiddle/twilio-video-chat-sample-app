{% extends 'base.html.twig' %}

{% block body %}
<nav class="fixed-top navbar navbar-expand-lg navbar-dark bg-dark">
  <div class="container-fluid">
    <span class="navbar-brand">Twilio Player</span>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>    
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item text-white me-2">
          <div class="fw-bold">[username] </div>
          <div>{{ username }}</div>
        </li>
        <li class="nav-item text-white me-2">
          <div class="fw-bold">[room name] </div>
          <div>{{ roomname }}</div>
          <input type="hidden" id="token" value="{{ token }}">
        </li>
        <li class="nav-item text-white me-2">
          <div class="fw-bold">[video room sid] </div>
          <div>{{ videoRoomSid }}</div>
          <input type="hidden" id="video-room-sid" value="{{ videoRoomSid }}">
        </li>       
        <li class="nav-item text-white me-2">
          <div class="fw-bold">[conversations sid] </div>
          <div>{{ chatRoomSid }}</div>
          <input type="hidden" id="chat-room-sid" value="{{ chatRoomSid }}">
        </li>
        <li class="nav-item text-white">
          <div class="fw-bold">[participant sid] </div>
          <div>{{ participantSid }}</div>
          <input type="hidden" id="participant-sid" value="{{ participantSid }}">
        </li>
      </ul>
    </div>
  </div>
</nav>
<div class="player-container h-100 overflow-hidden">
  <div class="row h-100" style="margin-top: 56px;">
    <div id="video-container" class="d-flex align-content-start" style="width: calc(100% - 300px);">
      <div id="{{ participantSid }}" class="video">
        <video id="my-room" autoplay muted="true"></video>
      </div>
    </div>
    <div id="chat-container" style="width: 300px;">
      <div id="message-send-container" class="row mt-3 me-1">
        <div class="col-10">
          <textarea id="message" class="w-100" rows="3"></textarea>
        </div>
        <div class="col-1">
          <button id="btn-attach-file" class="btn">
            <i class="fas fa-paperclip"></i>
          </button>
          <input type="file" name="file" id="attach-file" class="d-none">
          <button id="btn-message-send" class="btn">
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
        <div id="message-alert-toaster" class="toast d-flex align-items-center bg-danger text-light" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="toast-body"></div>
          <button type="button" class="btn-close ms-auto me-2" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
      <div id="message-receive-container">
        <div id="send-message-template" class="d-none">
          <div class="row">
            <div class="col-5 author"></div>
            <div class="col-7 datetime" class=""></div>
          </div>
          <div class="message-content"></div>
        </div>
        <div id="receive-message-template" class="d-none">
          <div class="row">
            <div class="col-5 author"></div>
            <div class="col-7 datetime"></div>
          </div>
          <div class="message-content"></div>
        </div>
      </div>
    </div>
</div>
<div class="fixed-bottom mt-auto py-3 bg-light">
  <div class="row">
    <div class="col-7">
      <div class="d-flex justify-content-center">
        <button id="btn-mute" class="btn">
          <i class="fas fa-microphone"></i>
        </button>
        <button id="btn-exit" class="btn ms-5">
          <i class="fas fa-sign-out-alt"></i>
        </button>
        <button id="btn-camera" class="btn ms-5">
          <i class="fas fa-video"></i>
        </button>
      </div>
    </div>
    <div class="col-3">
      <button id="btn-share-screen" class="btn">
        <i class="fas fa-share-alt"></i>
      </button>
      <button id="btn-chat" class="btn ms-5">
        <i class="fas fa-comment-dots"></i>
      </button>
    </div>
  </div>
</div>
<style>
video {
  width: 300px;
  height: 300px;
}
</style>
{% endblock %}
{% block javascripts %}
<script src="//sdk.twilio.com/js/video/releases/2.15.3/twilio-video.min.js"></script>
<script src="https://media.twiliocdn.com/sdk/js/conversations/releases/1.2.3/twilio-conversations.min.js"
  integrity="sha256-fGJzzkCU7845NUd6g0dG6/p0vm5aAIIAi0Vmsply9II="
  crossorigin="anonymous"></script>
<script type="text/javascript">
  let disconnected = false;
  $(() => {
    // ビデオルームに接続
    TwilioVideoPlayer.connect("my-room", "{{ token }}", "{{ roomname }}");
    // チャットルームに接続
    TwilioChat.initialize("{{ token }}", "{{ chatRoomSid }}");
    // カメラクリックイベント
    $('#btn-camera').on('click', (e) => {
      if (!TwilioVideoPlayer.isConnected()) {
        return;
      }
      // ボタンの状態でカメラの状態を判断する
      const $icon = $(e.target).is('i') ? $(e.target): $(e.target).find('i');
      const videoOn = $icon.hasClass('fa-video');
      TwilioVideoPlayer.cameraControl(!videoOn);

      // ボタンのアイコンを切り替え
      if (videoOn) {
        $icon.removeClass('fa-video').addClass('fa-video-slash');
      } else {
        $icon.removeClass('fa-video-slash').addClass('fa-video');
      }
    });
    // 退室アイコンクリックイベント
    $('#btn-exit').on('click', (e) => {
      e.preventDefault();
      TwilioChat.disconnect();
      TwilioVideoPlayer.disconnect();
      disconnected = true;
      window.close();
    });
    // ミュートクリックイベント
    $('#btn-mute').on('click', (e) => {
      if (!TwilioVideoPlayer.isConnected()) {
        return;
      }
      // ボタンの状態でマイクの状態を判断する
      const $icon = $(e.target).is('i') ? $(e.target): $(e.target).find('i');
      const audioOn = $icon.hasClass('fa-microphone');
      TwilioVideoPlayer.micControl(!audioOn);
      if (audioOn) {
        $icon.removeClass('fa-microphone').addClass('fa-microphone-slash');
      } else {
        $icon.removeClass('fa-microphone-slash').addClass('fa-microphone');
      }
    });
    // 画面共有アイコンクリックイベント
    $('#btn-share-screen').on('click', (e) => {
      TwilioVideoPlayer.shareScreen();
    });
    // チャットアイコンクリックイベント
    $('#btn-chat').on('click', (e) => {
      $('#chat-container').fadeToggle({
        done: () => {
          // ボタンのアイコンを切り替え
          const $icon = $(e.target).is('i') ? $(e.target): $(e.target).find('i')
          if ($('#chat-container').is(':visible')) {
            $icon.removeClass('far').addClass('fas');
          } else {
            $icon.removeClass('fas').addClass('far');
          }
        }
      })
    });
    // ファイル添付ファイルアイコンクリックイベント
    $('#btn-attach-file').on('click', () => {
      $('#attach-file').trigger('click');
    });
    // ファイル選択
    $('#attach-file').on('change', (e) => {
      if (e.target.files === 0) {
        return;
      }

      const size_16mb = 16 * 1024 * 1024;
      const file = e.target.files[0];
      if (file.size > size_16mb) {
        const toastEl = document.getElementById('message-alert-toaster');
        toastEl.querySelector('.toast-body').textContent = 'ファイルサイズが大きすぎます。16MB以下のファイルを選択してください。';
        (new bootstrap.Toast(toastEl)).show();
        return;
      }
      TwilioChat.sendAttachFile(file);
    });
    // メッセージ送信
    $('#btn-message-send').on('click', (e) => {
      const message = $('#message').val();
      if (!message.trim()) {
        return;
      }
      TwilioChat.sendMessage(message);
      $('#message').val('');
    });
    // メッセージ受信
    // TwilioChat.jsからのコールバック
    $(document).on('twilio-message-received', async (e, state) => {
      const isSelfMessage = $('#participant-sid').val() == state.participantSid;
      const template = isSelfMessage ? $('#send-message-template').clone() : $('#receive-message-template').clone();

      template.removeClass('d-none')
               .removeAttr('message-template')
               .attr('id', `message-${state.participantSid}`);
      template.find('.author').text(state.author);
      const timestamp = state.timestamp;
      const zeroPadding = (value) => ('00' + value).slice(-2);
      template.find('.datetime').text(`${timestamp.getFullYear()}/${zeroPadding(timestamp.getMonth()+1)}/${zeroPadding(timestamp.getDate())} ${zeroPadding(timestamp.getHours())}:${zeroPadding(timestamp.getMinutes())}`);
      if (state.body) {
        // メッセージ送信
        template.find('.message-content').html(state.body.replace(/\r?\n/g, '<br>'));
      } else {
        // ファイル添付
        const downloadUrl = await state.media.getContentTemporaryUrl();
        const fileLink = $(`<a>`, {
          href: downloadUrl,
          target: '_blank',
          title: state.media.state.filename,
          download: state.media.state.filename
        })
        .text(state.media.state.filename)
        .on('click', (e) => {
          // フィルダウンロード
          e.preventDefault();
          fetch(e.target.href)
            .then(resp => resp.blob())
            .then(blob => {
              const url = window.URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.style.display = 'none';
              a.href = url;
              a.download = e.target.title;
              document.body.appendChild(a);
              a.click();
              window.URL.revokeObjectURL(url);
            });
        });
        template.find('.message-content').append(fileLink);
      }
      template.appendTo('#message-receive-container');
    });
    // 画面を閉じたときに退室する（ビデオ、チャット）
    $(window).on('beforeunload', (e) => {
      if (!disconnected) {
        TwilioChat.disconnect();
        TwilioVideoPlayer.disconnect();
      }
    });
    // 別のページを表示したときに退室する（ビデオ、チャット）
    $(window).on('pagehide', (e) => {
      if (!disconnected) {
        TwilioChat.disconnect();
        TwilioVideoPlayer.disconnect();
      }
    });
  });
</script>
<script type="text/javascript" src="{{ asset('js/video-player.js') }}?{{ random(0, 100) }}" defer></script>
<script type="text/javascript" src="{{ asset('js/chat.js') }}?{{ random(0, 100) }}" defer></script>
{% endblock %}
